Design Patterns:
===============

Creational Patterns --->

--- Abstract Factory
--- Builder
--- Factory Method
--- Prototype
--- Singleton


Structural Patterns --->

--- Adapter
--- Bridge
--- Composite
--- Decorator
--- Facade
--- Flyweight
--- Proxy


Behavioral Patterns --->

--- Chain of Responsibility
--- Command
--- Interpreter
--- Iterator
--- Mediator
--- Memento
--- Observer
--- State
*-- Strategy
--- Template Method
--- Visitor

========================================================================================================================
Strategy pattern: (Also known as policy)

Defines a set of encapsulated algorithms that can be swapped to carry out a specific behaviour

When to use:
- Classes only change in behavior
- Different variants of an algorithm

Benefits:
- Avoid using conditional statements
- Clients can choose the required behavior

Drawback:
- Increases number of objects
========================================================================================================================
Proxy pattern:
Provide a class which will limit access to another class.
For security reasons. or it is accessed from remote location.
========================================================================================================================
Adapter pattern:
Allows 2 incompatible interfaces to work together
========================================================================================================================

